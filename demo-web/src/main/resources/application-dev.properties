############################################数据源配置#####################################################
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/demo?useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true
spring.datasource.username=root
spring.datasource.password=123
spring.datasource.driverClassName=com.mysql.jdbc.Driver
spring.jpa.hibernate.ddl-auto=none
spring.jpa.generate-ddl=true
spring.jpa.database=MYSQL
server.address=127.0.0.1
server.port=80
# 初始化大小，最小，最大
# 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
spring.datasource.initialSize=10
# 最小连接池数量
spring.datasource.minIdle=10
# 最大连接池数量
spring.datasource.maxActive=30
# 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，
#如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
spring.datasource.maxWait=60000
# 有两个含义：
# 1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。
# 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明  单位是毫秒  (微软云的time_out时间默认是120秒,理论上该值应该小于time_out)
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 连接保持空闲而不被驱逐的最小时间  单位是毫秒  (微软云的time_out时间默认是120秒,理论上该值应该小于time_out)
spring.datasource.minEvictableIdleTimeMillis=100000
# 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。
# 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。
spring.datasource.validationQuery=SELECT 'x'
# 检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法 单位：秒
#spring.datasource.validationQueryTimeout=30
# 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，
# 如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.testWhileIdle=true
# 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.testOnBorrow=true
# 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
# PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=stat,wallFilter,org.slf4j.log4j
spring.datasource.stat.mergeSql=true
spring.datasource.stat.slowSqlMillis=3000
spring.datasource.stat.logSlowSql=true
# 通过connectProperties属性来打开mergeSql功能
spring.datasource.connectionProperties=druid.stat.mergeSql=true
spring.datasource.removeAbandoned=false
# 对于建立时间超过removeAbandonedTimeout的连接强制关闭 单位秒 (removeAbandoned = true的时候)
spring.datasource.removeAbandonedTimeout=180
spring.datasource.logAbandoned=true
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true

#######################################mybatis Settings###################################################
mybatis.mapper.path=classpath:mybatis/*mapper/*.xml
mybatis.config.path=/mybatis/mybatis-config.xml

#指定message的basename，多个以逗号分隔，如果不加包名的话，默认从classpath路径开始，默认: messages
spring.messages.basename=i18n/messages
#设定加载的资源文件缓存失效时间，-1的话为永不过期，默认为-1
spring.messages.cache-duration=3600
#设定Message bundles的编码，默认: UTF-8
spring.messages.encoding=UTF-8

########################################### redis (RedisProperties)#####################################
spring.redis.database=6
# server host
spring.redis.host=127.0.0.1
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.jedis.pool.max-active=-1
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.jedis.pool.max-wait=3000
# 连接池中的最大空闲连接
spring.redis.jedis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.jedis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=3000
spring.redis.password=
spring.redis.port=6379